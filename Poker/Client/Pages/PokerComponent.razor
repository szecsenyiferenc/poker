@page "/"

<div class="poker-root">
    <NavigationBarComponent PokerUser="@PokerUser" LogoutClick="@Logout"></NavigationBarComponent>
    <div class="main-container">
        <div class="table-container">
            @if (SelectedTable != null)
            {
                <div class="table-overlay">
                    <div>Selected Table: @SelectedTable.Name</div>
                    <div class="poker-button noselect" @onclick="@(() => LeaveTable())">Leave</div>
                </div>
            }
            @foreach (var table in _tables)
            {
                <TableComponent Table="@table" OnClick="@(() => JoinToTable(table))"></TableComponent>
            }
            <NewTableComponent OnClick="@AddTable"></NewTableComponent>
        </div>
        <div class="poker-container">
            @if (SelectedTable == null)
            {
                <div class="poker-welcome-text noselect">
                    Please join to a table!
                </div>
            }
            else
            {
        <div class="poker-game-container">

            @for (int i = 0; i < Players.Count; i++)
            {
                <div class="@StyleMap[i]">
                    <CardRowComponent Cards="Players[i].Username == PokerUser.Username ? ownCards : unknown"></CardRowComponent>
                </div>
            }


          
            <div class="poker-middle">
                <CardRowComponent Cards="flop"></CardRowComponent>
            </div>
            <div class="poker-result noselect">
                @*@Result()*@
                @if (CurrentSessionGuid != null)
                {
                    <div class="poker-hud-container">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped bg-success justify-content-end @((!ProgressPercent.Color.Equals(default(Poker.Shared.Models.PokerModels.ProgressPercent)) ? ProgressPercent.Color : ""))" role="progressbar" aria-valuenow="@ProgressPercent.Percent" aria-valuemin="0" aria-valuemax="100" style="transform: rotate(180deg); width: @ProgressPercent.ToString()"></div>
                        </div>
                        <div class="poker-slider">
                            <input class="poker-slider-range" type="range" min="@MinValue" max="@MaxValue" @bind="Balance" @bind:event="oninput" step="50">
                            <div class="form-control poker-raise noselect">
                                @Balance
                            </div>
                        </div>
                        <div class="poker-action-container">
                            @foreach (var item in Enum.GetValues(typeof(Poker.Shared.Enums.PokerActionType)))
                            {
                                <div class="poker-button noselect" @onclick="() => SendAction((Poker.Shared.Enums.PokerActionType)item)">@item.ToString()</div>
                            }
                        </div>
                    </div>
                }
                @*<button @onclick="Start">Button</button>*@
            </div>
        </div>
            }

        </div>
    </div>
</div>